apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-gyeonggi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-gyeonggi
  template:
    metadata:
      labels:
        app: mysql-gyeonggi
    spec:
      # initContainers: 메인 컨테이너가 시작되기 전에 MySQL 데이터 디렉토리를 초기화하는 초기화 컨테이너
      initContainers:
      - name: init-mysql
        image: busybox
        command: ['sh', '-c', 'rm -rf /var/lib/mysql/* && rm -rf /var/lib/mysql'] # MySQL 데이터 디렉토리 초기화 명령어
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로

      # 메인 MySQL 컨테이너 설정
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        # MySQL 데이터베이스 이름 설정
        - name: MYSQL_DATABASE
          value: "gyeonggi"
        # Kubernetes Secret에서 MySQL 루트 비밀번호 가져오기
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: MYSQL_ROOT_PASSWORD
        ports:
        # MySQL 컨테이너 포트 설정
        - containerPort: 3306
        volumeMounts:
        # 영구 스토리지 볼륨 마운트
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로
        # 초기화 스크립트를 위한 ConfigMap 마운트
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d # 초기화 스크립트 디렉토리 마운트 경로
        # Liveness Probe: 컨테이너가 살아 있는지 확인
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        # Readiness Probe: 컨테이너가 준비되었는지 확인
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        resources:
          requests:
            memory: "512Mi" # 최소 메모리 요청
            cpu: "500m" # 최소 CPU 요청
          limits:
            memory: "1Gi" # 최대 메모리 제한
            cpu: "1" # 최대 CPU 제한
      volumes:
      # 영구 스토리지 볼륨 클레임
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: pvc-gyeonggi
      # 초기화 스크립트를 위한 ConfigMap
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-gyeonggi
spec:
  ports:
  # MySQL 서비스 포트 설정
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql-gyeonggi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-gangwon
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-gangwon
  template:
    metadata:
      labels:
        app: mysql-gangwon
    spec:
      # initContainers: 메인 컨테이너가 시작되기 전에 MySQL 데이터 디렉토리를 초기화하는 초기화 컨테이너
      initContainers:
      - name: init-mysql
        image: busybox
        command: ['sh', '-c', 'rm -rf /var/lib/mysql/* && rm -rf /var/lib/mysql'] # MySQL 데이터 디렉토리 초기화 명령어
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로

      # 메인 MySQL 컨테이너 설정
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        # MySQL 데이터베이스 이름 설정
        - name: MYSQL_DATABASE
          value: "gangwon"
        # Kubernetes Secret에서 MySQL 루트 비밀번호 가져오기
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: MYSQL_ROOT_PASSWORD
        ports:
        # MySQL 컨테이너 포트 설정
        - containerPort: 3306
        volumeMounts:
        # 영구 스토리지 볼륨 마운트
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로
        # 초기화 스크립트를 위한 ConfigMap 마운트
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d # 초기화 스크립트 디렉토리 마운트 경로
        # Liveness Probe: 컨테이너가 살아 있는지 확인
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        # Readiness Probe: 컨테이너가 준비되었는지 확인
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        resources:
          requests:
            memory: "512Mi" # 최소 메모리 요청
            cpu: "500m" # 최소 CPU 요청
          limits:
            memory: "1Gi" # 최대 메모리 제한
            cpu: "1" # 최대 CPU 제한
      volumes:
      # 영구 스토리지 볼륨 클레임
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: pvc-gangwon
      # 초기화 스크립트를 위한 ConfigMap
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-gangwon
spec:
  ports:
  # MySQL 서비스 포트 설정
  - port: 3307
    targetPort: 3306
  selector:
    app: mysql-gangwon
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-chungcheong
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-chungcheong
  template:
    metadata:
      labels:
        app: mysql-chungcheong
    spec:
      # initContainers: 메인 컨테이너가 시작되기 전에 MySQL 데이터 디렉토리를 초기화하는 초기화 컨테이너
      initContainers:
      - name: init-mysql
        image: busybox
        command: ['sh', '-c', 'rm -rf /var/lib/mysql/* && rm -rf /var/lib/mysql']
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql

      # 메인 MySQL 컨테이너 설정
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        # MySQL 데이터베이스 이름 설정
        - name: MYSQL_DATABASE
          value: "chungcheong"
        # Kubernetes Secret에서 MySQL 루트 비밀번호 가져오기
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: MYSQL_ROOT_PASSWORD
        ports:
        # MySQL 컨테이너 포트 설정
        - containerPort: 3306
        volumeMounts:
        # 영구 스토리지 볼륨 마운트
        - name: mysql-storage
          mountPath: /var/lib/mysql
        # 초기화 스크립트를 위한 ConfigMap 마운트
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        # Liveness Probe: 컨테이너가 살아 있는지 확인
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        # Readiness Probe: 컨테이너가 준비되었는지 확인
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "512Mi" # 최소 메모리 요청
            cpu: "500m" # 최소 CPU 요청
          limits:
            memory: "1Gi" # 최대 메모리 제한
            cpu: "1" # 최대 CPU 제한
      volumes:
      # 영구 스토리지 볼륨 클레임
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: pvc-chungcheong
      # 초기화 스크립트를 위한 ConfigMap
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-chungcheong
spec:
  ports:
  # MySQL 서비스 포트 설정
  - port: 3308
    targetPort: 3306
  selector:
    app: mysql-chungcheong
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-gyeongsang
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-gyeongsang
  template:
    metadata:
      labels:
        app: mysql-gyeongsang
    spec:
      # initContainers: 메인 컨테이너가 시작되기 전에 MySQL 데이터 디렉토리를 초기화하는 초기화 컨테이너
      initContainers:
      - name: init-mysql
        image: busybox
        command: ['sh', '-c', 'rm -rf /var/lib/mysql/* && rm -rf /var/lib/mysql'] # MySQL 데이터 디렉토리 초기화 명령어
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로

      # 메인 MySQL 컨테이너 설정
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        # MySQL 데이터베이스 이름 설정
        - name: MYSQL_DATABASE
          value: "gyeongsang"
        # Kubernetes Secret에서 MySQL 루트 비밀번호 가져오기
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: MYSQL_ROOT_PASSWORD
        ports:
        # MySQL 컨테이너 포트 설정
        - containerPort: 3306
        volumeMounts:
        # 영구 스토리지 볼륨 마운트
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로
        # 초기화 스크립트를 위한 ConfigMap 마운트
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d # 초기화 스크립트 디렉토리 마운트 경로
        # Liveness Probe: 컨테이너가 살아 있는지 확인
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        # Readiness Probe: 컨테이너가 준비되었는지 확인
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        resources:
          requests:
            memory: "512Mi" # 최소 메모리 요청
            cpu: "500m" # 최소 CPU 요청
          limits:
            memory: "1Gi" # 최대 메모리 제한
            cpu: "1" # 최대 CPU 제한
      volumes:
      # 영구 스토리지 볼륨 클레임
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: pvc-gyeongsang
      # 초기화 스크립트를 위한 ConfigMap
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-gyeongsang
spec:
  ports:
  # MySQL 서비스 포트 설정
  - port: 3309
    targetPort: 3306
  selector:
    app: mysql-gyeongsang
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-jeju
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-jeju
  template:
    metadata:
      labels:
        app: mysql-jeju
    spec:
      # initContainers: 메인 컨테이너가 시작되기 전에 MySQL 데이터 디렉토리를 초기화하는 초기화 컨테이너
      initContainers:
      - name: init-mysql
        image: busybox
        command: ['sh', '-c', 'rm -rf /var/lib/mysql/* && rm -rf /var/lib/mysql'] # MySQL 데이터 디렉토리 초기화 명령어
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로

      # 메인 MySQL 컨테이너 설정
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        # MySQL 데이터베이스 이름 설정
        - name: MYSQL_DATABASE
          value: "jeju"
        # Kubernetes Secret에서 MySQL 루트 비밀번호 가져오기
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: MYSQL_ROOT_PASSWORD
        ports:
        # MySQL 컨테이너 포트 설정
        - containerPort: 3306
        volumeMounts:
        # 영구 스토리지 볼륨 마운트
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로
        # 초기화 스크립트를 위한 ConfigMap 마운트
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d # 초기화 스크립트 디렉토리 마운트 경로
        # Liveness Probe: 컨테이너가 살아 있는지 확인
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        # Readiness Probe: 컨테이너가 준비되었는지 확인
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        resources:
          requests:
            memory: "512Mi" # 최소 메모리 요청
            cpu: "500m" # 최소 CPU 요청
          limits:
            memory: "1Gi" # 최대 메모리 제한
            cpu: "1" # 최대 CPU 제한
      volumes:
      # 영구 스토리지 볼륨 클레임
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: pvc-jeju
      # 초기화 스크립트를 위한 ConfigMap
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-jeju
spec:
  ports:
  # MySQL 서비스 포트 설정
  - port: 3310
    targetPort: 3306
  selector:
    app: mysql-jeju
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-jeolla
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-jeolla
  template:
    metadata:
      labels:
        app: mysql-jeolla
    spec:
      # initContainers: 메인 컨테이너가 시작되기 전에 MySQL 데이터 디렉토리를 초기화하는 초기화 컨테이너
      initContainers:
      - name: init-mysql
        image: busybox
        command: ['sh', '-c', 'rm -rf /var/lib/mysql/* && rm -rf /var/lib/mysql'] # MySQL 데이터 디렉토리 초기화 명령어
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로

      # 메인 MySQL 컨테이너 설정
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        # MySQL 데이터베이스 이름 설정
        - name: MYSQL_DATABASE
          value: "jeolla"
        # Kubernetes Secret에서 MySQL 루트 비밀번호 가져오기
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: MYSQL_ROOT_PASSWORD
        ports:
        # MySQL 컨테이너 포트 설정
        - containerPort: 3306
        volumeMounts:
        # 영구 스토리지 볼륨 마운트
        - name: mysql-storage
          mountPath: /var/lib/mysql # MySQL 데이터 디렉토리 마운트 경로
        # 초기화 스크립트를 위한 ConfigMap 마운트
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d # 초기화 스크립트 디렉토리 마운트 경로
        # Liveness Probe: 컨테이너가 살아 있는지 확인
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        # Readiness Probe: 컨테이너가 준비되었는지 확인
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30 # 초기 지연 시간
          periodSeconds: 10 # 체크 주기
        resources:
          requests:
            memory: "512Mi" # 최소 메모리 요청
            cpu: "500m" # 최소 CPU 요청
          limits:
            memory: "1Gi" # 최대 메모리 제한
            cpu: "1" # 최대 CPU 제한
      volumes:
      # 영구 스토리지 볼륨 클레임
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: pvc-jeolla
      # 초기화 스크립트를 위한 ConfigMap
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-jeolla
spec:
  ports:
  # MySQL 서비스 포트 설정
  - port: 3311
    targetPort: 3306
  selector:
    app: mysql-jeolla
